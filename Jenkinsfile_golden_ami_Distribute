#!groovy

node('master') {
def Operation_Type_small
    try {

        stage('Clean workspace before build') {
            deleteDir()
        }

        wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'jenkins-aws-key', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
        stage('Code checkout') {
            checkout([$class: 'GitSCM',
            branches: scm.branches,
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            gitTool: 'Default',
            submoduleCfg: [],
            userRemoteConfigs: [[credentialsId: 'jenkins-github',
            url: 'https://github.com/maddy-imp/image-management.git']]]
            )
        }

        stage('Distribute AMI') {
            sh '''
            pwd
            cd packer-scanner
            whoami
            export PATH="$PATH:/usr/local/packer:/usr/bin/ansible-playbook"
            echo $PATH
            cd ../ansible
            ansible-galaxy install -r requirements.yml
            cd -
            packer --version
            
            ## script for distributing AMI across accounts
            set -x

            echo "Operation Type: $Operation_Type"
            echo "AMI_ID: $AMI_ID"
            echo "Snapshot_ID: $Snapshot_ID"
            echo "Account_ID: $Account_ID"
            echo "Region: $Region"
            echo "$Operation_Type.toLowerCase()"
            
            def test = $Operation_Type.toLowerCase()
            echo $test

            for Account_ID_var in $(echo $Account_ID | sed "s/,/ /g")
            do
                echo "$Account_ID_var"
                
            for AMI_ID_var in $(echo $AMI_ID | sed "s/,/ /g")
            do
                ## grants launch permissions for the specified AMI to the specified AWS account
            	#aws ec2 modify-image-attribute --region $Region --image-id $AMI_ID --launch-permission "$Operation_Type=[{UserId=$Account_ID}]"
            
            	## grants create volume permission for a snapshot
            	#aws ec2 modify-snapshot-attribute --region $Region --snapshot-id $Snapshot_ID --attribute createVolumePermission --operation-type ${Operation_Type,,} --user-ids $Account_ID
                echo "$AMI_ID_var"
            done
            
            done

            echo "sweet baby!"
            ## end of script
            
            '''
        }

    }
    }
    } catch (e) {
        currentBuild.result = "FAILURE"
        throw e

    } finally {
        result = currentBuild.result ?: "SUCCESS"
        previousResult = currentBuild.previousBuild?.result
    }
}
